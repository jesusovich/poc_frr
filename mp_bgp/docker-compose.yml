---
version: "3"
networks:
  p1_pe1:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.1.0/24
  p1_pe2:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.2.0/24
  p1_pe3:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.3.0/24
  p1_pe4:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.4.0/24
  p2_pe1:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.5.0/24
  p2_pe2:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.6.0/24
  p2_pe3:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.7.0/24
  p2_pe4:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.8.0/24
  p1_p2:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.50.9.0/24
  pe1_cpe1:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.100.1.0/24
  pe2_cpe1:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.100.2.0/24
  pe3_cpe2:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.100.3.0/24
  pe4_dia1:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.100.4.0/24
  cpe1_pc1:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.200.1.0/24
  cpe2_pc2:
    enable_ipv6: false
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 10.200.2.0/24
services:
  p1:
    privileged: true
    image: frrouting/frr:latest
    container_name: p1
    restart: always
    volumes:
      - $PWD/p1:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        echo 'net.mpls.conf.lo.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth0.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth1.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth2.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth3.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth4.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.platform_labels = 100000' >> /etc/sysctl.conf
        sysctl -p
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      p1_pe1:
        ipv4_address: 10.50.1.11
      p1_pe2:
        ipv4_address: 10.50.2.11
      p1_pe3:
        ipv4_address: 10.50.3.11
      p1_pe4:
        ipv4_address: 10.50.4.11
      p1_p2:
        ipv4_address: 10.50.9.11
  p2:
    privileged: true
    image: frrouting/frr:latest
    container_name: p2
    restart: always
    volumes:
      - $PWD/p2:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        echo 'net.mpls.conf.lo.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth0.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth1.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth2.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth3.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth4.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.platform_labels = 100000' >> /etc/sysctl.conf
        sysctl -p
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      p2_pe1:
        ipv4_address: 10.50.5.12
      p2_pe2:
        ipv4_address: 10.50.6.12
      p2_pe3:
        ipv4_address: 10.50.7.12
      p2_pe4:
        ipv4_address: 10.50.8.12
      p1_p2:
        ipv4_address: 10.50.9.12
  pe1:
    privileged: true
    image: frrouting/frr:latest
    container_name: pe1
    restart: always
    volumes:
      - $PWD/pe1:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        echo 'net.mpls.conf.lo.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth0.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth1.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth2.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.platform_labels = 100000' >> /etc/sysctl.conf
        sysctl -p
        ip link add dev DATA type vrf table 200
        ip link set dev DATA up
        ip link set dev eth2 master DATA
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      p1_pe1:
        ipv4_address: 10.50.1.21
      p2_pe1:
        ipv4_address: 10.50.5.21
      pe1_cpe1:
        ipv4_address: 10.100.1.21
  pe2:
    privileged: true
    image: frrouting/frr:latest
    container_name: pe2
    restart: always
    volumes:
      - $PWD/pe2:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        echo 'net.mpls.conf.lo.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth0.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth1.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth2.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.platform_labels = 100000' >> /etc/sysctl.conf
        sysctl -p
        ip link add dev INTERNET type vrf table 200
        ip link set dev INTERNET up
        ip link set dev eth2 master INTERNET
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      p1_pe2:
        ipv4_address: 10.50.2.22
      p2_pe2:
        ipv4_address: 10.50.6.22
      pe2_cpe1:
        ipv4_address: 10.100.2.22
  pe3:
    privileged: true
    image: frrouting/frr:latest
    container_name: pe3
    restart: always
    volumes:
      - $PWD/pe3:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        echo 'net.mpls.conf.lo.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth0.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth1.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth2.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.platform_labels = 100000' >> /etc/sysctl.conf
        sysctl -p
        ip link add dev DATA type vrf table 200
        ip link set dev DATA up
        ip link set dev eth2 master DATA
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      p1_pe3:
        ipv4_address: 10.50.3.23
      p2_pe3:
        ipv4_address: 10.50.7.23
      pe3_cpe2:
        ipv4_address: 10.100.3.23
  pe4:
    privileged: true
    image: frrouting/frr:latest
    container_name: pe4
    restart: always
    volumes:
      - $PWD/pe4:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        echo 'net.mpls.conf.lo.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth0.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth1.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.conf.eth2.input = 1' >> /etc/sysctl.conf
        echo 'net.mpls.platform_labels = 100000' >> /etc/sysctl.conf
        sysctl -p
        ip link add dev INTERNET type vrf table 200
        ip link set dev INTERNET up
        ip link set dev eth2 master INTERNET
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      p1_pe4:
        ipv4_address: 10.50.4.24
      p2_pe4:
        ipv4_address: 10.50.8.24
      pe4_dia1:
        ipv4_address: 10.100.4.24
  cpe1:
    privileged: true
    image: frrouting/frr:latest
    container_name: cpe1
    restart: always
    volumes:
      - $PWD/cpe1:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        ip link add dev VPN type vrf table 200
        ip link set dev VPN up
        ip link set dev eth0 master VPN
        ip link set dev eth1 master VPN
        ip link set dev eth2 master VPN
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      pe1_cpe1:
        ipv4_address: 10.100.1.31
      pe2_cpe1:
        ipv4_address: 10.100.2.31
      cpe1_pc1:
        ipv4_address: 10.200.1.31
  cpe2:
    privileged: true
    image: frrouting/frr:latest
    container_name: cpe2
    restart: always
    volumes:
      - $PWD/cpe2:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        ip link add dev VPN type vrf table 200
        ip link set dev VPN up
        ip link set dev eth0 master VPN
        ip link set dev eth1 master VPN
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      pe3_cpe2:
        ipv4_address: 10.100.3.32
      cpe2_pc2:
        ipv4_address: 10.200.2.32
  dia1:
    privileged: true
    image: frrouting/frr:latest
    container_name: dia1
    restart: always
    volumes:
      - $PWD/dia1:/etc/frr:rw
    entrypoint:
      - bash
      - -c
      - |
        iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
        /sbin/tini -- /usr/lib/frr/docker-start
    networks:
      pe4_dia1:
        ipv4_address: 10.100.4.33
  pc1:
    image: busybox:latest
    container_name: pc1
    restart: always
    cap_add:
      - NET_ADMIN
    command:
      - sh
      - -c
      - |
        ip route del default
        ip route add default via 10.200.1.31 dev eth0
        tail -f /dev/null
    networks:
      cpe1_pc1:
        ipv4_address: 10.200.1.41
  pc2:
    image: busybox:latest
    container_name: pc2
    restart: always
    cap_add:
      - NET_ADMIN
    command:
      - sh
      - -c
      - |
        ip route del default
        ip route add default via 10.200.2.32 dev eth0
        tail -f /dev/null
    networks:
      cpe2_pc2:
        ipv4_address: 10.200.2.42